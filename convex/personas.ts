import { google } from "@ai-sdk/google";
import { getAuthUserId } from "@convex-dev/auth/server";
import { generateObject, NoObjectGeneratedError } from "ai";
import { v } from "convex/values";
import {
  buildBatchPersonaPrompt,
  buildPersonaPrompt,
} from "../lib/personas/prompt";
import { type PersonaAIOutput, PersonaSchema } from "../lib/personas/schemas";
import { action, mutation, query } from "./_generated/server";

export const generate = action({
  args: {
    group: v.string(),
    count: v.number(),
    audienceId: v.optional(v.string()),
    context: v.object({
      location: v.optional(v.string()),
      audienceDescription: v.optional(v.string()),
      segment: v.optional(
        v.object({
          id: v.string(),
          label: v.string(),
          description: v.string(),
          color: v.optional(v.string()),
        })
      ),
      // emotional_state will be generated by the model
    }),
  },
  handler: async (_ctx, args): Promise<any> => {
    try {
      const normalizeGroupId = (raw: string): string => raw;
      const group = normalizeGroupId(args.group);
      const { object } = await generateObject({
        model: google("gemini-2.5-flash"),
        output: "array",
        schema: PersonaSchema,
        schemaName: "Persona",
        schemaDescription:
          "A standardized marketing persona used for ad simulations.",
        prompt: buildPersonaPrompt({
          group: group as any,
          count: Math.min(Math.max(args.count, 1), 10),
          context: {
            location: args.context?.location,
            audienceDescription: args.context?.audienceDescription,
            segment: args.context?.segment,
          },
        }),
        // Reduce variance to increase schema adherence
        temperature: 0.2,
      });

      // Get the authenticated user ID
      const userId = await getAuthUserId(_ctx);
      if (userId === null) {
        throw new Error("Must be signed in to generate personas");
      }

      // AI now generates flattened personas directly - just add DB-specific fields
      const personasWithMetadata = (object as PersonaAIOutput[]).map((p) => ({
        ...p,
        audienceGroup: group, // Ensure the group is set correctly
        audienceId: args.audienceId ?? "default",
        userId,
      }));

      const savedPersonas: any = await _ctx.runMutation(
        (api as any).personas.saveMany,
        {
          personas: personasWithMetadata,
        }
      );
      return savedPersonas;
    } catch (error) {
      if (NoObjectGeneratedError.isInstance(error)) {
        // Log error details if needed for debugging
      }
      throw error;
    }
  },
});

// Save many personas mutation
import { api } from "./_generated/api";

export const saveMany = mutation({
  args: {
    personas: v.array(v.any()),
  },
  handler: async (ctx, args) => {
    const table = ctx.db;
    const insertedIds: any[] = [];
    for (const p of args.personas) {
      const id = await table.insert("personas", p);
      insertedIds.push(id);
    }
    // Return the saved personas with their IDs
    const savedPersonas = await Promise.all(
      insertedIds.map((id) => table.get(id))
    );
    return savedPersonas.filter((p) => p !== null);
  },
});

export const listByGroup = query({
  args: { group: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 100;
    return await ctx.db
      .query("personas")
      .withIndex("by_group", (q) => q.eq("audienceGroup", args.group))
      .order("desc")
      .take(limit);
  },
});

export const getByPersonaId = query({
  args: { personaId: v.string() },
  handler: async (ctx, args) => {
    const results = await ctx.db
      .query("personas")
      .withIndex("by_persona_id", (q) => q.eq("personaId", args.personaId))
      .collect();
    return results[0] ?? null;
  },
});

export const listByAudienceId = query({
  args: { audienceId: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 100;
    return await ctx.db
      .query("personas")
      .withIndex("by_audience", (q) => q.eq("audienceId", args.audienceId))
      .order("desc")
      .take(limit);
  },
});

export const generateForGroups = action({
  args: {
    groups: v.array(
      v.object({
        id: v.string(),
        label: v.string(),
        color: v.string(),
        description: v.string(),
        percent: v.optional(v.number()),
      })
    ),
    total: v.optional(v.number()),
    audienceId: v.optional(v.string()),
    context: v.optional(
      v.object({
        location: v.optional(v.string()),
        audienceDescription: v.optional(v.string()),
        segment: v.optional(
          v.object({
            id: v.string(),
            label: v.string(),
            description: v.string(),
            color: v.optional(v.string()),
          })
        ),
      })
    ),
  },
  handler: async (ctx, args): Promise<any> => {
    const total = Math.max(1, Math.min(args.total ?? 16, 32));
    if (args.groups.length === 0) {
      return [];
    }

    // Evenly distribute totals across provided groups (previous behavior), but batch into a single LLM call
    const perGroupBase = Math.floor(total / args.groups.length);
    const remainder = total % args.groups.length;
    const distribution = args.groups.map((g, i) => ({
      id: g.id,
      count: perGroupBase + (i < remainder ? 1 : 0),
    }));

    const prompt = buildBatchPersonaPrompt({
      groups: distribution as any,
      total,
      context: args.context as any,
    });

    try {
      const { object } = await generateObject({
        model: google("gemini-2.5-flash"),
        output: "array",
        schema: PersonaSchema,
        schemaName: "Persona",
        schemaDescription:
          "A standardized marketing persona used for ad simulations.",
        prompt,
        temperature: 0.2,
      });

      // Get the authenticated user ID
      const userId = await getAuthUserId(ctx);
      if (userId === null) {
        throw new Error("Must be signed in to generate personas");
      }

      // AI now generates flattened personas directly - just add DB-specific fields
      const personasWithMetadata = (object as PersonaAIOutput[]).map((p) => ({
        ...p,
        audienceId: args.audienceId ?? "default",
        userId,
      }));

      const savedPersonas: any = await ctx.runMutation(
        (api as any).personas.saveMany,
        {
          personas: personasWithMetadata,
        }
      );
      return savedPersonas;
    } catch (error) {
      if (NoObjectGeneratedError.isInstance(error)) {
        // Log error details if needed for debugging
      }
      throw error;
    }
  },
});
