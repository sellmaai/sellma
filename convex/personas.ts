import { action, mutation, query } from './_generated/server';
import { v } from 'convex/values';
import { generateObject, NoObjectGeneratedError } from 'ai';
import { google } from '@ai-sdk/google';
import { PersonaSchema } from '../lib/personas/schemas';
import { buildPersonaPrompt, buildBatchPersonaPrompt } from '../lib/personas/prompt';
import { audienceGroupIds } from '../lib/personas/audienceGroups';

export const generate = action({
  args: {
    group: v.string(),
    count: v.number(),
    audienceId: v.optional(v.string()),
    context: v.object({
      location: v.optional(v.string()),
      audienceDescription: v.optional(v.string()),
      segment: v.optional(
        v.object({
          id: v.string(),
          label: v.string(),
          description: v.string(),
          color: v.optional(v.string()),
        })
      ),
      // emotional_state will be generated by the model
    }),
  },
  handler: async (_ctx, args) => {
    try {
      const normalizeGroupId = (raw: string): string => {
        const canonical = new Set(audienceGroupIds as readonly string[]);
        if (canonical.has(raw)) return raw;
        const text = raw.toLowerCase();
        const matches = [
          { id: 'fitness', keys: ['fitness', 'wellness', 'gym', 'health', 'workout', 'nutrition', 'recovery'] },
          { id: 'tech', keys: ['tech', 'software', 'developer', 'engineering', 'gadget', 'ai', 'ml', 'saas'] },
          { id: 'beauty', keys: ['beauty', 'skincare', 'cosmetic', 'makeup'] },
          { id: 'home', keys: ['home', 'lifestyle', 'decor', 'household', 'furniture'] },
          { id: 'outdoors', keys: ['outdoor', 'outdoors', 'hiking', 'camping', 'trail', 'adventure', 'gear'] },
        ];
        for (const group of matches) {
          if (group.keys.some((k) => text.includes(k))) return group.id;
        }
        return 'tech';
      };
      const group = normalizeGroupId(args.group);
      const { object } = await generateObject({
        model: google('gemini-2.5-flash'),
        output: 'array',
        schema: PersonaSchema,
        schemaName: 'Persona',
        schemaDescription: 'A standardized marketing persona used for ad simulations.',
        prompt: buildPersonaPrompt({
          group: group as any,
          count: Math.min(Math.max(args.count, 1), 10),
          context: {
            location: args.context?.location,
            audienceDescription: args.context?.audienceDescription,
            segment: args.context?.segment,
          },
        }),
      });

      // Tag with audienceId if provided and persist
      const personasWithAudience = (object as any[]).map((p) => ({
        ...p,
        audienceGroup: group,
        audienceId: args.audienceId ?? 'default',
      }));
      await _ctx.runMutation((api as any).personas.saveMany, { personas: personasWithAudience });
      return personasWithAudience; // Persona[]
    } catch (error) {
      if (NoObjectGeneratedError.isInstance(error)) {
        console.error('convex.personas.generate NoObjectGeneratedError', {
          cause: error.cause,
          text: error.text,
          response: error.response,
          usage: error.usage,
        });
      }
      throw error;
    }
  },
});

// Save many personas mutation
import { api } from './_generated/api';

export const saveMany = mutation({
  args: {
    personas: v.array(v.any()),
  },
  handler: async (ctx, args) => {
    const table = ctx.db;
    for (const p of args.personas) {
      await table.insert('personas', p);
    }
  },
});

export const listByGroup = query({
  args: { group: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 100;
    return await ctx.db
      .query('personas')
      .withIndex('by_group', (q) => q.eq('audienceGroup', args.group))
      .order('desc')
      .take(limit);
  },
});

export const getByPersonaId = query({
  args: { persona_id: v.string() },
  handler: async (ctx, args) => {
    const results = await ctx.db
      .query('personas')
      .withIndex('by_persona_id', (q) => q.eq('persona_id', args.persona_id))
      .collect();
    return results[0] ?? null;
  },
});

export const listByAudienceId = query({
  args: { audienceId: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 100;
    return await ctx.db
      .query('personas')
      .withIndex('by_audience', (q) => q.eq('audienceId', args.audienceId))
      .order('desc')
      .take(limit);
  },
});

export const generateForGroups = action({
  args: {
    groups: v.array(
      v.object({ id: v.string(), label: v.string(), color: v.string(), description: v.string(), percent: v.optional(v.number()) })
    ),
    total: v.optional(v.number()),
    audienceId: v.optional(v.string()),
    context: v.optional(v.object({
      location: v.optional(v.string()),
      audienceDescription: v.optional(v.string()),
      segment: v.optional(
        v.object({
          id: v.string(),
          label: v.string(),
          description: v.string(),
          color: v.optional(v.string()),
        })
      ),
    })),
  },
  handler: async (ctx, args) => {
    const total = Math.max(1, Math.min(args.total ?? 16, 32));
    if (args.groups.length === 0) return [];

    // Evenly distribute totals across provided groups (previous behavior), but batch into a single LLM call
    const perGroupBase = Math.floor(total / args.groups.length);
    const remainder = total % args.groups.length;
    const distribution = args.groups.map((g, i) => ({
      id: g.id,
      count: perGroupBase + (i < remainder ? 1 : 0),
    }));

    const prompt = buildBatchPersonaPrompt({
      groups: distribution as any,
      total,
      context: args.context as any,
    });

    try {
      const { object } = await generateObject({
        model: google('gemini-2.5-flash'),
        output: 'array',
        schema: PersonaSchema,
        schemaName: 'Persona',
        schemaDescription: 'A standardized marketing persona used for ad simulations.',
        prompt,
      });

      const personasWithAudience = (object as any[]).map((p) => ({
        ...p,
        audienceId: args.audienceId ?? 'default',
      }));

      await ctx.runMutation((api as any).personas.saveMany, { personas: personasWithAudience });
      return personasWithAudience;
    } catch (error) {
      if (NoObjectGeneratedError.isInstance(error)) {
        console.error('convex.personas.generateForGroups NoObjectGeneratedError', {
          cause: error.cause,
          text: error.text,
          response: error.response,
          usage: error.usage,
        });
      }
      throw error;
    }
  },
});


