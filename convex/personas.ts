import { action, mutation, query } from './_generated/server';
import { v } from 'convex/values';
import { generateObject, NoObjectGeneratedError } from 'ai';
import { google } from '@ai-sdk/google';
import { PersonaSchema } from '../lib/personas/schemas';
import { buildPersonaPrompt } from '../lib/personas/prompt';

export const generate = action({
  args: {
    group: v.string(),
    count: v.number(),
    context: v.object({
      location: v.optional(v.string()),
      // emotional_state will be generated by the model
    }),
  },
  handler: async (_ctx, args) => {
    try {
      const { object } = await generateObject({
        model: google('gemini-1.5-pro'),
        output: 'array',
        schema: PersonaSchema,
        schemaName: 'Persona',
        schemaDescription: 'A standardized marketing persona used for ad simulations.',
        prompt: buildPersonaPrompt({
          group: args.group as any,
          count: Math.min(Math.max(args.count, 1), 10),
          context: { location: args.context?.location },
        }),
      });

      // Persist the generated personas
      await _ctx.runMutation((api as any).personas.saveMany, { personas: object });
      return object; // Persona[]
    } catch (error) {
      if (NoObjectGeneratedError.isInstance(error)) {
        console.error('convex.personas.generate NoObjectGeneratedError', {
          cause: error.cause,
          text: error.text,
          response: error.response,
          usage: error.usage,
        });
      }
      throw error;
    }
  },
});

// Save many personas mutation
import { api } from './_generated/api';

export const saveMany = mutation({
  args: {
    personas: v.array(v.any()),
  },
  handler: async (ctx, args) => {
    const table = ctx.db;
    for (const p of args.personas) {
      await table.insert('personas', p);
    }
  },
});

export const listByGroup = query({
  args: { group: v.string(), limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 100;
    return await ctx.db
      .query('personas')
      .withIndex('by_group', (q) => q.eq('personaGroup', args.group))
      .order('desc')
      .take(limit);
  },
});

export const getByPersonaId = query({
  args: { persona_id: v.string() },
  handler: async (ctx, args) => {
    const results = await ctx.db
      .query('personas')
      .withIndex('by_persona_id', (q) => q.eq('persona_id', args.persona_id))
      .collect();
    return results[0] ?? null;
  },
});

export const generateForGroups = action({
  args: {
    groups: v.array(
      v.object({ id: v.string(), label: v.string(), color: v.string(), description: v.string() })
    ),
    total: v.optional(v.number()),
    context: v.optional(v.object({ location: v.optional(v.string()) })),
  },
  handler: async (ctx, args) => {
    const total = Math.max(1, Math.min(args.total ?? 16, 32));
    const perGroupBase = Math.floor(total / args.groups.length);
    const remainder = total % args.groups.length;
    const batches: Array<{ groupId: string; count: number }> = args.groups.map((g, i) => ({
      groupId: g.id,
      count: perGroupBase + (i < remainder ? 1 : 0),
    }));

    const allPersonas: any[] = [];
    for (const batch of batches) {
      if (batch.count <= 0) continue;
      const personas = await ctx.runAction((api as any).personas.generate, {
        group: batch.groupId,
        count: batch.count,
        context: args.context,
      });
      allPersonas.push(...personas);
    }

    await ctx.runMutation((api as any).personas.saveMany, { personas: allPersonas });
    return allPersonas;
  },
});


